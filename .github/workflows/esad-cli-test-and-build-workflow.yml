name: AD CLI Test and Build
on: [pull_request, push]

jobs:
  build:
    defaults:
      run:
        working-directory: cli
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        go-version: [1.14]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Set up Go ${{ matrix.platform }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check out AD CLI
        uses: actions/checkout@v2

      - name: Build
        env:
          GOPROXY: "https://proxy.golang.org"
        run: go build .

  code-analysis:
    defaults:
      run:
        working-directory: cli
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go ubuntu-latest
        uses: actions/setup-go@v2
        with:
          go-version: 1.14

      - name: Check out AD CLI
        uses: actions/checkout@v2

      - name: Format
        run: |
          cd ..
          go get golang.org/x/tools/cmd/goimports
          cd cli
          goimports -w .
      - name: Check for modified files
        id: git-check
        run: |
          echo ::set-output name=modified::$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)
      - name: Display unformated changes
        if: steps.git-check.outputs.modified == 'true'
        run: |
          echo "Failed to format using goimports".
          git diff
          exit 1
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2.3.0
        with:
          version: v1.28
          working-directory: cli

      - name: Run coverage
        env:
          GOPROXY: "https://proxy.golang.org"
        run: |
          go test ./...  -coverprofile=coverage.out
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.0.3
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          file: cli/coverage.out
          flags: cli
          name: codecov-umbrella
